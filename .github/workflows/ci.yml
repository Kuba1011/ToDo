name: CI
on:
  push:
  pull_request:
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  MIN_COVERAGE: "80"
  TRIVY_SEVERITY: "HIGH,CRITICAL"
  PYTHONPATH: ${{ github.workspace }}

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pip-audit

      - name: Make reports dir
        run: mkdir -p reports

      - name: Tests + coverage (>=${{ env.MIN_COVERAGE }}%)  # bez E2E
        run: |
          pytest -m "not e2e" --cov=app --cov-branch --cov-report=term --cov-fail-under=${{ env.MIN_COVERAGE }}
          coverage json -o reports/coverage.json

      - name: pip-audit (JSON, fail on any finding)
        run: |
          mkdir -p reports
          pip-audit -r requirements.txt \
            --format json \
            --output reports/pip-audit.json \
            --strict

      - name: Trivy FS (JSON)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          scanners: vuln,secret,license
          ignore-unfixed: true
          severity: ${{ env.TRIVY_SEVERITY }}
          format: json
          output: reports/trivy-fs.json

      - name: SBOM (CycloneDX) – zależności Pythona z requirements.txt
        run: |
          pip install cyclonedx-bom
          cyclonedx-py -r requirements.txt --format json -o reports/sbom-app.cdx.json

      - name: SBOM (CycloneDX) – kod źródłowy repo
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: cyclonedx-json
          output-file: reports/sbom-source.cdx.json



      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports/*.json

  e2e:
    needs: quality
    runs-on: ubuntu-latest
    env:
      FLASK_APP: app
      PYTHONPATH: ${{ github.workspace }}
      BASE_URL: http://127.0.0.1:5000
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install deps (app + tests + Playwright)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-playwright playwright

      - name: Install Playwright browsers
        run: python -m playwright install --with-deps chromium

      - name: Run Flask in background
        run: |
          nohup python -m flask run --host=0.0.0.0 --port=5000 > flask.log 2>&1 &
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:5000/ >/dev/null; then
              echo "Flask is up"; break
            fi
            sleep 1
          done

      - name: Run E2E tests (Playwright)
        run: pytest -q -m e2e

      - name: Print Flask log on failure
        if: failure()
        run: cat flask.log
